name: CI
on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  docker_username: j4rb
  docker_password: ${{ secrets.GITHUB_TOKEN }}
  GIT_COMMIT: ${{ github.sha }}
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4
      - name: Set safe directory
        run: git config --global --add safe.directory /__w/eficode-simple-fortune-cookie/eficode-simple-fortune-cookie
      - name: Build Backend
        working-directory: ./backend
        run: go build
      - name: Build Frontend
        working-directory: ./frontend
        run: go build

  Test:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4
      - name: Run tests
        working-directory: ./frontend
        run: go test

  Docker-Backend:
    runs-on: ubuntu-latest
    needs: [Test]
    permissions:
      packages: write
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4
      - name: echo username
        run: echo ${{ secrets.DOCKERHUB_USERNAME }}
      - name: Log in to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: $docker_username
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image tag
        run: echo "TAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Build Backend Docker image
        working-directory: ./backend
        run: docker build -t ghcr.io/$docker_username/simple-fortune-cookie-backend:${{ env.TAG }} .
      - name: Push Backend Docker image
        run: docker push ghcr.io/$docker_username/simple-fortune-cookie-backend:${{ env.TAG }}
      - name: Push Backend latest
        run: |
          docker tag ghcr.io/$docker_username/simple-fortune-cookie-backend:${{ env.TAG }} ghcr.io/$docker_username/simple-fortune-cookie-backend:latest
          docker push ghcr.io/$docker_username/simple-fortune-cookie-backend:latest

  Docker-Frontend:
    runs-on: ubuntu-latest
    needs: [Test]
    permissions:
      packages: write
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4
      - name: echo username
        run: echo ${{ secrets.DOCKERHUB_USERNAME }}
      - name: Log in to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: $docker_username
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image tag
        run: echo "TAG=${GITHUB_SHA}" >> $GITHUB_ENV
      - name: Build Frontend Docker image
        working-directory: ./frontend
        run: docker build -t ghcr.io/$docker_username/simple-fortune-cookie-frontend:${{ env.TAG }} .
      - name: Push frontend Docker image
        run: docker push ghcr.io/$docker_username/simple-fortune-cookie-frontend:${{ env.TAG }}
      - name: Push frontend latest
        run: |
          docker tag ghcr.io/$docker_username/simple-fortune-cookie-frontend:${{ env.TAG }} ghcr.io/$docker_username/simple-fortune-cookie-frontend:latest
          docker push ghcr.io/$docker_username/simple-fortune-cookie-frontend:latest

  Deploy:
    runs-on: ubuntu-latest
    needs: [Docker-Backend, Docker-Frontend]
    #if: github.ref == 'refs/heads/main'
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4
      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig        
      - name: Verify Kubernetes access
        run: kubectl --kubeconfig kubeconfig get nodes
      - name: Deploy
        run: kubectl --kubeconfig kubeconfig apply -f kube
      - name: Setup Docker Compose
        run: docker compose up --build -d
      - name: Verify Service Health (localhost:8080)
        id: health_check
        run: |
          MAX_RETRIES=10  # Increased retries for service startup
          RETRY_DELAY=5   # seconds
          URL="http://localhost:8080"

          echo "Attempting to curl $URL with retries..."
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES..."
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")

            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "Service at $URL is healthy (Status 200)."
              echo "health_check_status=200" >> $GITHUB_OUTPUT
              exit 0 # Exit the script successfully
            else
              echo "Service at $URL returned status $STATUS_CODE. Retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done

          echo "Error: Service at $URL did not return 200 after $MAX_RETRIES attempts."
          echo "health_check_status=failed" >> $GITHUB_OUTPUT
          exit 1 # Exit with a failure code to mark the step as failed